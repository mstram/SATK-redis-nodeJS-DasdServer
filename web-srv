#!/home/action/.parts/bin/node
// A simple web server that generates dyanmic content based on responses from Redis

var http = require("http"), server,
    redis_client = require("redis").createClient();
   // redis_client = require("redis");

server = http.createServer(function (request, response) {
    response.writeHead(200, {
        "Content-Type": "text/plain"
    });
    
    var redis_info, total_requests;
    var redis_keys; // mike
    
    redis_client.info(function (err, reply) {
        redis_info = reply; // stash response in outer scope
    });
  
   // mike
    //redis_client.keys(function (err, reply) {
    //    redis_keys = reply; // stash response in outer scope
    //});
    //console.log("redis_keys :"+ redis_keys);
   
  
    redis_client.incr("requests", function (err, reply) {
        total_requests = reply; // stash response in outer scope
    });
  
    redis_client.hincrby("ip", request.connection.remoteAddress, 1);
    redis_client.hgetall("ip", function (err, reply) {
        // This is the last reply, so all of the previous replies must have completed already
        response.write("(Mike) This page was generated after talking to redis.\n\n" +
            "Redis info:\n" + redis_info + "\n" +
            "Total requests: " + total_requests + "\n\n" +
            "IP count: \n");
      // mike
    //    var keys = redis_client.keys("*");  // mike
    //    console.log("keys:" + keys);        // mike
      
        Object.keys(reply).forEach(function (ip) {
          response.write("   ip:" + ip + " reply[ip]: " + reply[ip] + "\n");
          response.write("<p>-----------------------------</p>");
      //    response.write("keys:");  // mike
      //    response.write( redis_keys);     // mike
          
        });
        response.end();
    });
});
console.log("server listening on http port 8000");
server.listen(8000);
